@Test
    public void testGetAllUsersReturnsEmptyList() throws UserException {
        when(userRepository.findAll()).thenReturn(Arrays.asList());

        Exception exception = org.junit.jupiter.api.Assertions.assertThrows(UserException.class, () -> {
            userService.getAllUsers();
        });

        assertThat(exception.getMessage()).isEqualTo("No users found !");
    }

    @Test
    public void testGetAllUsersThrowsException() throws UserException {
        when(userRepository.findAll()).thenThrow(new RuntimeException("DB Error"));

        Exception exception = org.junit.jupiter.api.Assertions.assertThrows(UserException.class, () -> {
            userService.getAllUsers();
        });

        assertThat(exception.getMessage()).isEqualTo("DB Error");
    }

    @Test
    public void testAuthenticateByUserNameThrowsException() throws UserException {
        when(userRepository.findByName(anyString())).thenThrow(new RuntimeException("DB Error"));

        CustomResponse<UserDTO> response = userService.authenticateByUserName("john", "pass123");

        assertThat(response.getStatus()).isEqualTo("failure");
        assertThat(response.getMessage()).isEqualTo("Something went wrong");
    }

    @Test
    public void testAuthenticateByUserNameWithNullName() throws UserException {
        CustomResponse<UserDTO> response = userService.authenticateByUserName(null, "pass123");

        assertThat(response.getStatus()).isEqualTo("failure");
        assertThat(response.getMessage()).isEqualTo("No body with the username");
    }

    @Test
    public void testAuthenticateByUserNameWithNullPassword() throws UserException {
        User user = new User();
        user.setName("john");
        user.setPassword(null);
        when(userRepository.findByName("john")).thenReturn(Optional.of(user));

        CustomResponse<UserDTO> response = userService.authenticateByUserName("john", null);

        assertThat(response.getStatus()).isEqualTo("failure");
        assertThat(response.getMessage()).isEqualTo("Invalid Password");
    }
