package com.adp.eletter.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.adp.eletter.dto.CandidateDTO;
import com.adp.eletter.entitiy.Candidate;
import com.adp.eletter.entitiy.Candidate.OfferLetterStatus;
import com.adp.eletter.exception.CandidateException;
import com.adp.eletter.repository.CandidateRepository;

@Service
public class CandidateServiceImpl implements CandidateService{

	
	@Autowired
	private CandidateRepository candidateRepository;
	
	@Autowired
	private ModelMapper modelMapper;
	
//	@Override
//	public Candidate CreateCandidate(Candidate candidate) {
//		return candidateRepository.save(candidate);
//	}

	
@Override
public List<CandidateDTO> getAllCandidates() throws CandidateException {
	
	try {
		List<Candidate> candidateEntityList = candidateRepository.findAll();
		
		if(candidateEntityList.isEmpty()) {
			throw new CandidateException("No candidates found !");
		}
		
		List<CandidateDTO> candidateDTOList = new ArrayList<>();
		
		candidateEntityList.forEach(candidate -> {
			CandidateDTO candidateDTO = modelMapper.map(candidate,CandidateDTO.class);
			candidateDTOList.add(candidateDTO);
		});
		return candidateDTOList;
	} catch (Exception e) {
		throw new CandidateException(e.getMessage(),e);
	}
}

@Override
public CandidateDTO getCandidateById(Long candidateId) throws CandidateException {
	
	try {
		Optional<Candidate> candidateEntity = candidateRepository.findById(candidateId);
		
		if(candidateEntity.isEmpty()) {
			throw new CandidateException("Candidate Not available");
		}
		CandidateDTO candidateDTO = modelMapper.map(candidateEntity, CandidateDTO.class);
		return candidateDTO;
	} catch (Exception e) {
		throw new CandidateException(e.getMessage(),e);
	}
}

@Override
public List<CandidateDTO> getCandidateByHRId(String assignedHRId) throws CandidateException {
	try {
		List<Candidate> candidateEntityList = candidateRepository.findAll();
		List<Candidate> candidateEntityListByHRId = 
				candidateEntityList.stream().filter(candidate -> 
								candidate.getAssignedHRId().equals(assignedHRId)).toList();
		
		if(candidateEntityListByHRId.isEmpty()) {
			throw new CandidateException("No candidates found !");
		}
		
		List<CandidateDTO> candidateDTOListByHRId = new ArrayList<>();
		
		candidateEntityListByHRId.forEach(candidate -> {
			CandidateDTO candidateDTO = modelMapper.map(candidate, CandidateDTO.class);
			candidateDTOListByHRId.add(candidateDTO);
		});		
		return candidateDTOListByHRId;
	} catch (Exception e) {
		throw new CandidateException(e.getMessage(),e);
	}
}

@Override
public List<CandidateDTO> getCandidateByManagerId(String managerId) throws CandidateException {
	try {
		List<Candidate> candidateEntityList = candidateRepository.findAll();
		List<Candidate> candidateEntityListByManagerId = 
				candidateEntityList.stream().filter(candidate -> 
								candidate.getManagerId().equals(managerId)).toList();
		
		if(candidateEntityListByManagerId.isEmpty()) {
			throw new CandidateException("No candidates found !");
		}
		
		List<CandidateDTO> candidateDTOListByManagerId = new ArrayList<>();
		
		candidateEntityListByManagerId.forEach(candidate -> {
			CandidateDTO candidateDTO = modelMapper.map(candidate, CandidateDTO.class);
			candidateDTOListByManagerId.add(candidateDTO);
		});		
		return candidateDTOListByManagerId;
	} catch (Exception e) {
		throw new CandidateException(e.getMessage(),e);
	}
}

@Override
public List<CandidateDTO> getCandidateByStatus(OfferLetterStatus offerLetterStatus) throws CandidateException {
	try {
		List<Candidate> candidateEntityList = candidateRepository.findAll();
		List<Candidate> candidateEntityListWithStatus =
				candidateEntityList.stream()
									.filter(candidate -> candidate.getOfferLetterStatus() == offerLetterStatus).toList();
		
		if(candidateEntityListWithStatus.isEmpty()) {
			throw new CandidateException("No candidates found !");
		}
		
		List<CandidateDTO> candidateDTOListWithNewStatus = new ArrayList<>();
		
		candidateEntityListWithStatus.forEach(candidate -> {
			CandidateDTO candidateDTO = modelMapper.map(candidate, CandidateDTO.class);
			candidateDTOListWithNewStatus.add(candidateDTO);
		});	
		return candidateDTOListWithNewStatus;
	} catch (Exception e) {
		throw new CandidateException(e.getMessage(),e);
	}
}

//@Override
//public List<CandidateDTO> getCandidateWithNewStatus() throws CandidateException {
//	try {
//		List<Candidate> candidateEntityList = candidateRepository.findAll();
//		List<Candidate> candidateEntityListWithNewStatus =
//				candidateEntityList.stream()
//									.filter(candidate -> candidate.getOfferLetterStatus() == Candidate.OfferLetterStatus.GENERATED).toList();
//		List<CandidateDTO> candidateDTOListWithNewStatus = new ArrayList<>();
//		
//		candidateEntityListWithNewStatus.forEach(candidate -> {
//			CandidateDTO candidateDTO = modelMapper.map(candidate, CandidateDTO.class);
//			candidateDTOListWithNewStatus.add(candidateDTO);
//		});	
//		return candidateDTOListWithNewStatus;
//	} catch (Exception e) {
//		throw new CandidateException(e.getMessage(),e);
//	}
//}

//@Override
//public List<CandidateDTO> getCandidateWithPendingStatus() throws CandidateException {
//	try {
//		List<Candidate> candidateEntityList = candidateRepository.findAll();
//		List<Candidate> candidateEntityListWithPendingStatus =
//				candidateEntityList.stream()
//									.filter(candidate -> candidate.getOfferLetterStatus() == Candidate.OfferLetterStatus.PENDING).toList();
//		List<CandidateDTO> candidateDTOListWithPendingStatus = new ArrayList<>();
//		
//		candidateEntityListWithPendingStatus.forEach(candidate -> {
//			CandidateDTO candidateDTO = modelMapper.map(candidate, CandidateDTO.class);
//			candidateDTOListWithPendingStatus.add(candidateDTO);
//		});	
//		return candidateDTOListWithPendingStatus;
//	} catch (Exception e) {
//		throw new CandidateException(e.getMessage(),e);
//	}
//}

//@Override
//public List<CandidateDTO> getCandidateWithApprovedStatus() throws CandidateException {
//	// TODO Auto-generated method stub
//	return null;
//}

//@Override
//public List<CandidateDTO> getCandidateWithRejectedStatus() throws CandidateException {
//	// TODO Auto-generated method stub
//	return null;
//}

@Override
public CandidateDTO updateOfferLetterStatus(Long candidateId, OfferLetterStatus status) throws CandidateException {
	try {
		Optional<Candidate> candidateEntity = candidateRepository.findById(candidateId);
		
		if(candidateEntity.isEmpty()) {
			throw new CandidateException("Candidate Not available");
		}
		
		Candidate candidate = candidateEntity.get();
		
		//update the offer status
		candidate.setOfferLetterStatus(status);
		
		//save the updated candidate entity
		Candidate updatedCandidate = candidateRepository.save(candidate);
		
		CandidateDTO updatedCandidateDTO = modelMapper.map(updatedCandidate, CandidateDTO.class);
		
		return updatedCandidateDTO;
	} catch (Exception e) {
		throw new CandidateException(e.getMessage(),e);
	}	
}



@Override
public List<CandidateDTO> getCandidateByHRIdAndByStatus(String assignedHRId, OfferLetterStatus offerLetterStatus)
		throws CandidateException {
	
	try {
		List<Candidate> candidateEntityList = candidateRepository.findAll();
		List<Candidate> candidateEntityListByHRId = 
				candidateEntityList.stream().filter(candidate -> 
								candidate.getAssignedHRId().equals(assignedHRId)).toList();
		
		if(candidateEntityListByHRId.isEmpty()) {
			throw new CandidateException("No candidates found !");
		}
		
		List<Candidate> candidateEntityListWithStatus =
				candidateEntityListByHRId.stream()
									.filter(candidate -> candidate.getOfferLetterStatus() == offerLetterStatus).toList();
		
		if(candidateEntityListWithStatus.isEmpty()) {
			throw new CandidateException("Candidate Not available");
		}
		
		List<CandidateDTO> candidateDTOListWithStatus = new ArrayList<>();
		
		candidateEntityListWithStatus.forEach(candidate -> {
			CandidateDTO candidateDTO = modelMapper.map(candidate, CandidateDTO.class);
			candidateDTOListWithStatus.add(candidateDTO);
		});	
		return candidateDTOListWithStatus;
	} catch (Exception e) {
		throw new CandidateException(e.getMessage(),e);
	}
	
}

@Override
public List<CandidateDTO> getCandidateByManagerIdAndByStatus(String managerId, OfferLetterStatus offerLetterStatus)
		throws CandidateException {
	
	try {
		List<Candidate> candidateEntityList = candidateRepository.findAll();
		List<Candidate> candidateEntityListByManagerId = 
				candidateEntityList.stream().filter(candidate -> 
								candidate.getManagerId().equals(managerId)).toList();
		
		if(candidateEntityListByManagerId.isEmpty()) {
			throw new CandidateException("No candidates found !");
		}
		
		List<Candidate> candidateEntityListWithStatus =
				candidateEntityListByManagerId.stream()
									.filter(candidate -> candidate.getOfferLetterStatus() == offerLetterStatus).toList();
		
		if(candidateEntityListWithStatus.isEmpty()) {
			throw new CandidateException("Candidate Not available");
		}
		
		List<CandidateDTO> candidateDTOListWithStatus = new ArrayList<>();
		
		candidateEntityListWithStatus.forEach(candidate -> {
			CandidateDTO candidateDTO = modelMapper.map(candidate, CandidateDTO.class);
			candidateDTOListWithStatus.add(candidateDTO);
		});	
		return candidateDTOListWithStatus;
	} catch (Exception e) {
		throw new CandidateException(e.getMessage(),e);
	}
}


}
