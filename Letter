package com.adp.eletter.service;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.reset;
import static org.mockito.Mockito.anyLong;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.modelmapper.ModelMapper;

import com.adp.eletter.dto.CandidateDTO;
import com.adp.eletter.entitiy.Candidate;
import com.adp.eletter.entitiy.Candidate.OfferLetterStatus;
import com.adp.eletter.exception.CandidateException;
import com.adp.eletter.repository.CandidateRepository;

@ExtendWith(MockitoExtension.class)
public class CandidateServiceIntegrationTest {

    @Mock
    private CandidateRepository candidateRepository;

    @InjectMocks
    private CandidateServiceImpl candidateServiceImpl;

    private Candidate candidate1, candidate2;

    @BeforeEach
    public void setUp() {
        candidate1 = new Candidate(
            12l,                        // candidateId
            "panda",                    // firstName
            "barenya",                  // lastName
            "panda@gmail.com",          // email
            1000000l,                   // pay
            "ADP01",                    // jobId
            "Male",                     // gender
            9390999755l,                // mobile
            "2023-09-25",               // joiningDate (added as an example, adjust accordingly)
            "3gds",                     // assignedHRId
            OfferLetterStatus.GENERATED, // offerLetterStatus
            "12gnfc",                   // selectedTemplateId
            "some/path/to/letter",      // generatedLetterDestination (added as an example, adjust accordingly)
            "Remark by HR",             // remarksByHR (added as an example, adjust accordingly)
            "Remark by Manager"         // remarksByManager (added as an example, adjust accordingly)
        );

        candidate2 = new Candidate(
            22l,                        // candidateId
            "nandu",                    // firstName
            "surendhar",                // lastName
            "davu@gmail.com",           // email
            1000000l,                   // pay
            "ADP01",                    // jobId
            "Male",                     // gender
            9390999755l,                // mobile
            "2023-09-26",               // joiningDate (added as an example, adjust accordingly)
            "3ds",                      // assignedHRId
            OfferLetterStatus.APPROVED, // offerLetterStatus
            "12gnfc",                   // selectedTemplateId
            "some/path/to/letter",      // generatedLetterDestination (added as an example, adjust accordingly)
            "Remark by HR",             // remarksByHR (added as an example, adjust accordingly)
            "Remark by Manager"         // remarksByManager (added as an example, adjust accordingly)
        );

        List<Candidate> allCandidates = Arrays.asList(candidate1, candidate2);

        Mockito.when(candidateRepository.findById(candidate1.getCandidateId())).thenReturn(Optional.of(candidate1));
        Mockito.when(candidateRepository.findById(candidate2.getCandidateId())).thenReturn(Optional.of(candidate2));
        Mockito.when(candidateRepository.findAll()).thenReturn(allCandidates);
        Mockito.when(candidateRepository.findById(-99L)).thenReturn(Optional.empty());
    }
    
    
    @Test
    public void whenValidID_thenCandidateShouldBeFound() throws CandidateException {
        Long id = 22l;
        CandidateDTO found = candidateServiceImpl.getCandidateById(id);
        verifyFindByIdIsCalledOnce();
        assertThat(found.getCandidateId()).isEqualTo(id);
    }

    // Uncommented and refactored this test
    @Test
    public void whenInValidID_thenCandidateShouldNotBeFound() {
        Long id = -99L;
        Exception exception = assertThrows(CandidateException.class, () -> {
            candidateServiceImpl.getCandidateById(id);
        });
        verifyFindByIdIsCalledOnce();
        String expectedMessage = "Candidate Not available";  // Assuming this is the exception message
        String actualMessage = exception.getMessage();
        assertThat(actualMessage).isEqualTo(expectedMessage);
    }
    
    @Test
    public void whenUpdateOfferLetterStatus_thenStatusShouldBeUpdated() throws CandidateException {
        Long id = 12L; // For instance, we're using the ID of the candidate1
        OfferLetterStatus newStatus = OfferLetterStatus.APPROVED;

        Candidate updatedCandidate = new Candidate();  // Clone candidate1 or you can manually create an updated version.
        updatedCandidate.setOfferLetterStatus(newStatus);  // Update the status of this cloned/updated candidate.

        Mockito.when(candidateRepository.findById(id)).thenReturn(Optional.of(candidate1));  // Initially it returns the non-updated version.
        Mockito.when(candidateRepository.save(Mockito.any(Candidate.class))).thenReturn(updatedCandidate);  // When we save, it should return the updated candidate.

        CandidateDTO result = candidateServiceImpl.updateOfferLetterStatus(id, newStatus);

        assertThat(result.getOfferLetterStatus()).isEqualTo(newStatus);  // Check if the status in the DTO is updated.

        verify(candidateRepository, times(1)).findById(id);  // Ensure findById is called once.
        verify(candidateRepository, times(1)).save(Mockito.any(Candidate.class));  // Ensure save is called once.
    }

    // ... [other test methods remain largely unchanged]

    // Utility methods to verify interactions
    private void verifyFindByIdIsCalledOnce() {
        verify(candidateRepository, times(1)).findById(anyLong());
        reset(candidateRepository);
    }

    private void verifyFindAllCandidatesIsCalledOnce() {
        verify(candidateRepository, times(1)).findAll();
        reset(candidateRepository);
    }
}
