package com.adp.eletter.entitiy;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

@Entity
@Table(name = "email")
public class Email {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    private String content;

    // Constructors, getters, setters and other utility methods...
}

package com.adp.eletter.repository;

import com.adp.eletter.entitiy.Email;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface EmailRepository extends JpaRepository<Email, Long> {
    // No custom methods required as basic CRUD operations are inherited from JpaRepository
}


package com.adp.eletter.repository;

import static org.assertj.core.api.Assertions.assertThat;
import java.util.List;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;

@DataJpaTest
public class EmailRepositoryTest {

    @Autowired
    private EmailRepository emailRepository;

    @BeforeEach
    public void setUp() {
        // Here you can set up any initial data before each test.
    }

    @AfterEach
    public void tearDown() {
        // Clear the database after each test to ensure there's no interference between tests.
        emailRepository.deleteAll();
    }

    @Test
    public void whenSaveEmail_thenReturnSavedEmail() {
        Email email = new Email();
        email.setId(1L);
        email.setContent("Sample content");
        // Add any other necessary properties for the Email entity

        Email savedEmail = emailRepository.save(email);

        Email found = emailRepository.findById(savedEmail.getId()).orElse(null);
        assertThat(found).isNotNull();
        assertThat(found.getContent()).isEqualTo(email.getContent());
    }

    @Test
    public void whenInvalidId_thenReturnNull() {
        Email fromDb = emailRepository.findById(-9999L).orElse(null); // Use a negative ID assuming it won't exist
        assertThat(fromDb).isNull();
    }

    @Test
    public void givenSetOfEmails_whenFindAll_thenReturnAllEmails() {
        Email email1 = new Email();
        email1.setContent("First email");
        // Add any other necessary properties

        Email email2 = new Email();
        email2.setContent("Second email");
        // Add any other necessary properties

        emailRepository.save(email1);
        emailRepository.save(email2);

        List<Email> allEmails = emailRepository.findAll();

        assertThat(allEmails).isNotEmpty();
        assertThat(allEmails).contains(email1, email2);
    }
}
