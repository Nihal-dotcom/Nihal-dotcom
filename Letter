

//
package com.adp.eletter.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.adp.eletter.dto.CandidateDTO;
import com.adp.eletter.entitiy.Candidate;
import com.adp.eletter.entitiy.Candidate.OfferLetterStatus;
import com.adp.eletter.exception.CandidateException;
import com.adp.eletter.repository.CandidateRepository;

@Service
public class CandidateServiceImpl implements CandidateService{

	
	@Autowired
	private CandidateRepository candidateRepository;
	
	@Autowired
	private ModelMapper modelMapper;
	
//	@Override
//	public Candidate CreateCandidate(Candidate candidate) {
//		return candidateRepository.save(candidate);
//	}

	
@Override
public List<CandidateDTO> getAllCandidates() throws CandidateException {
	
	try {
		List<Candidate> candidateEntityList = candidateRepository.findAll();
		
		if(candidateEntityList.isEmpty()) {
			throw new CandidateException("No candidates found !");
		}
		
		List<CandidateDTO> candidateDTOList = new ArrayList<>();
		
		candidateEntityList.forEach(candidate -> {
			CandidateDTO candidateDTO = modelMapper.map(candidate,CandidateDTO.class);
			candidateDTOList.add(candidateDTO);
		});
		return candidateDTOList;
	} catch (Exception e) {
		throw new CandidateException(e.getMessage(),e);
	}
}

@Override
public CandidateDTO getCandidateById(Long candidateId) throws CandidateException {
	
	try {
		Optional<Candidate> candidateEntity = candidateRepository.findById(candidateId);
		
		if(candidateEntity.isEmpty()) {
			throw new CandidateException("Candidate Not available");
		}
		CandidateDTO candidateDTO = modelMapper.map(candidateEntity, CandidateDTO.class);
		return candidateDTO;
	} catch (Exception e) {
		throw new CandidateException(e.getMessage(),e);
	}
}

@Override
public List<CandidateDTO> getCandidateByHRId(String assignedHRId) throws CandidateException {
	try {
		List<Candidate> candidateEntityList = candidateRepository.findAll();
		List<Candidate> candidateEntityListByHRId = 
				candidateEntityList.stream().filter(candidate -> 
								candidate.getAssignedHRId().equals(assignedHRId)).toList();
		
		List<CandidateDTO> candidateDTOListByHRId = new ArrayList<>();
		
		candidateEntityListByHRId.forEach(candidate -> {
			CandidateDTO candidateDTO = modelMapper.map(candidate, CandidateDTO.class);
			candidateDTOListByHRId.add(candidateDTO);
		});		
		return candidateDTOListByHRId;
	} catch (Exception e) {
		throw new CandidateException(e.getMessage(),e);
	}
}

@Override
public List<CandidateDTO> getCandidateByManagerId(String managerId) throws CandidateException {
	try {
		List<Candidate> candidateEntityList = candidateRepository.findAll();
		List<Candidate> candidateEntityListByManagerId = 
				candidateEntityList.stream().filter(candidate -> 
								candidate.getManagerId().equals(managerId)).toList();
		
		List<CandidateDTO> candidateDTOListByManagerId = new ArrayList<>();
		
		candidateEntityListByManagerId.forEach(candidate -> {
			CandidateDTO candidateDTO = modelMapper.map(candidate, CandidateDTO.class);
			candidateDTOListByManagerId.add(candidateDTO);
		});		
		return candidateDTOListByManagerId;
	} catch (Exception e) {
		throw new CandidateException(e.getMessage(),e);
	}
}

@Override
public List<CandidateDTO> getCandidateWithNewStatus() throws CandidateException {
	try {
		List<Candidate> candidateEntityList = candidateRepository.findAll();
		List<Candidate> candidateEntityListWithNewStatus =
				candidateEntityList.stream()
									.filter(candidate -> candidate.getOfferLetterStatus() == Candidate.OfferLetterStatus.GENERATED).toList();
		List<CandidateDTO> candidateDTOListWithNewStatus = new ArrayList<>();
		
		candidateEntityListWithNewStatus.forEach(candidate -> {
			CandidateDTO candidateDTO = modelMapper.map(candidate, CandidateDTO.class);
			candidateDTOListWithNewStatus.add(candidateDTO);
		});	
		return candidateDTOListWithNewStatus;
	} catch (Exception e) {
		throw new CandidateException(e.getMessage(),e);
	}
}

@Override
public List<CandidateDTO> getCandidateWithPendingStatus() throws CandidateException {
	try {
		List<Candidate> candidateEntityList = candidateRepository.findAll();
		List<Candidate> candidateEntityListWithPendingStatus =
				candidateEntityList.stream()
									.filter(candidate -> candidate.getOfferLetterStatus() == Candidate.OfferLetterStatus.PENDING).toList();
		List<CandidateDTO> candidateDTOListWithPendingStatus = new ArrayList<>();
		
		candidateEntityListWithPendingStatus.forEach(candidate -> {
			CandidateDTO candidateDTO = modelMapper.map(candidate, CandidateDTO.class);
			candidateDTOListWithPendingStatus.add(candidateDTO);
		});	
		return candidateDTOListWithPendingStatus;
	} catch (Exception e) {
		throw new CandidateException(e.getMessage(),e);
	}
}

@Override
public List<CandidateDTO> getCandidateWithApprovedStatus() throws CandidateException {
	// TODO Auto-generated method stub
	return null;
}

package com.adp.eletter.service;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import java.util.Arrays;
import java.util.Optional;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import com.adp.eletter.dto.CandidateDTO;
import com.adp.eletter.entitiy.Candidate;
import com.adp.eletter.repository.CandidateRepository;
import org.modelmapper.ModelMapper;

public class CandidateServiceImplTest {

    @Mock
    private CandidateRepository candidateRepository;

    @Mock
    private ModelMapper modelMapper;

    @InjectMocks
    private CandidateServiceImpl candidateService;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testGetAllCandidates() throws Exception {
        when(candidateRepository.findAll()).thenReturn(Arrays.asList(new Candidate()));

        CandidateDTO mockDTO = new CandidateDTO();
        when(modelMapper.map(any(Candidate.class), eq(CandidateDTO.class))).thenReturn(mockDTO);

        var candidates = candidateService.getAllCandidates();

        assertNotNull(candidates);
        assertFalse(candidates.isEmpty());
        assertEquals(1, candidates.size());
    }

    // ... You can continue to write more tests for other methods ...
}

	
	
}

//
package com.adp.eletter.service;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFParagraph;
import org.apache.poi.xwpf.usermodel.XWPFRun;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ClassPathResource;
import org.springframework.stereotype.Service;

import com.adp.eletter.entitiy.Candidate;
import com.adp.eletter.entitiy.Candidate.OfferLetterStatus;
import com.adp.eletter.entitiy.HR;
import com.adp.eletter.repository.CandidateRepository;
import com.adp.eletter.repository.HRRepository;

@Service
public class HrServiceImpl implements HrService {

	
	@Autowired
	private HRRepository hrRepository;
	
	
	@Autowired
	private CandidateRepository candidateRepository;
	
	@Autowired
	private CandidateServiceImpl candidateServiceImpl;
	
	
	@Autowired
	private TemplateServiceImpl templateServiceImpl;
	
	private static final String destinationPath = "C:\\Users\\thammisr\\Desktop\\batch2-eletter-ttfivee-backend-repo\\src\\main\\resources\\templates\\offerletterdocument.docx";
	
	@Override
	public HR getHRById(Long assocId) {
		HR hr = hrRepository.findById(assocId).orElse(null);
		
		if(hr!=null)
			return hr;
		return null;
	}

	@Override
	public HR updateProfile(Long assocId, HR updatedHR) {
		HR hrExists = hrRepository.findById(assocId).orElse(null);
		if(hrExists!=null) {
			
			hrExists.setAssocId(updatedHR.getAssocId());
			hrExists.setAssocId(updatedHR.getAssocId());
			hrExists.setEmail(updatedHR.getEmail());
			hrExists.setName(updatedHR.getName());
			hrExists.setPassword(updatedHR.getPassword());
			
			
			return hrRepository.save(hrExists);
		
		}
		return null;
	}

//	@Override
//	public List<Candidate> getCandidateAssignedToHR(Long assocId) {
//		
//		HR hr = hrRepository.findById(assocId).orElse(null);
//		
//		if(hr!=null) {
//			List<Candidate> list = candidateServiceImpl.getCandidateByHRId(assocId);
//		}
//		
//		return Collections.emptyList();
//	}

//	@Override
//	public boolean selectTemplateForCandidate(Long assocId, Long candidateId, String templateId) {
//		
//		HR hr = hrRepository.findById(assocId).orElse(null);
//		if(hr!=null) {
//		  
//		Candidate candidate = candidateServiceImpl.getCandidateById(candidateId);
//		
//		if(candidate!=null) {
//			// String templateFileName = templateServiceImpl.getTemplateFileName(templateId);
//			
//			candidate.setSelectedTemplateId(templateId);
//			
//			candidateRepository.save(candidate);
//			
//		    return true;
//		}
//		
//		}
//		return false;
//	}
//
//	@Override
//	public boolean generateOfferLetter(Long assocId, Long candidateId) {
//		HR hr = hrRepository.findById(assocId).orElse(null);
//		if(hr!=null) {
//			Candidate candidate = candidateServiceImpl.getCandidateById(candidateId);
//			if(candidate!=null) {
//				
//				
//				boolean success = populate(candidate);
//				
//				if(success) {
//					candidate.setOfferLetterStatus(OfferLetterStatus.PENDING);
//					candidateRepository.save(candidate);
//					
//					return true;
//				}
//			}
//		}
//		return false;
//	}

	private boolean populate(Candidate candidate) {
	
		//Map<String, String> placeholderMap = new HashMap<>();
		try {
			ClassPathResource fileResource = new ClassPathResource("./static/offerletter.docx");
			FileInputStream templateInputStream = new FileInputStream(fileResource.getFile());
			XWPFDocument document = new XWPFDocument(templateInputStream);
			
			Map<String,String> map = new HashMap<>();
			map.put("{localDate}", "12-08-2023");
			map.put("{name}", "rajkumar");
			map.put("{company}","ADP" );
			map.put("{pay}", "6,00,000");
			map.put("{location}", "hyderabad");
			
			for(XWPFParagraph paragraph : document.getParagraphs()) {
			
				for(XWPFRun run : paragraph.getRuns()) {
					String text = run.getText(0);
					
					//System.out.println(text);
					
				for(Map.Entry<String, String> m : map.entrySet()) {
					if(text!=null) {
						text = text.replace(m.getKey(),m.getValue());
						//System.out.println(text);
					}
					
			}
					run.setText(text, 0);
				
				}
				
			}
			FileOutputStream file = new FileOutputStream(destinationPath);
			document.write(file);
			file.close();
			
			File targetFile = new File(destinationPath);
			if(targetFile.exists())
			{
				return true;
			}
			
			
		}catch (Exception e) {
			e.printStackTrace();
		}
		return false;
	
	}

	@Override
	public List<Candidate> getCandidateAssignedToHR(Long assocId) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public boolean selectTemplateForCandidate(Long assocId, Long candidateId, String templateId) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean generateOfferLetter(Long assocId, Long candidateId) {
		// TODO Auto-generated method stub
		return false;
	}

	

//	@Override
//	public boolean storeGeneratedOfferLetter(Long assocId, Long candidateId, String offerLetterFilePath) {
//		// TODO Auto-generated method stub
//		return false;
//	}
	

}




//
package com.adp.eletter.service;

import java.util.Collections;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.adp.eletter.entitiy.Candidate;
import com.adp.eletter.entitiy.Candidate.OfferLetterStatus;
import com.adp.eletter.entitiy.Manager;
import com.adp.eletter.repository.ManagerRepository;


@Service
public class ManagerServiceImpl implements ManagerService{
	
	@Autowired
	private  ManagerRepository managerRepository;
	
	@Autowired
	private CandidateServiceImpl candidateServiceImpl;
	
	@Override
	public Manager getById(Long assocId) {
		
		
		Manager manager = managerRepository.findById(assocId).orElse(null);
		if(manager!=null) {
			return manager;
		}
		return null;
	}

	@Override
	public Manager updateProfile(Long assocId, Manager updatedManager) {
		
		Manager managerExists = managerRepository.findById(assocId).orElse(null);
		
		if(managerExists!=null) {
		managerExists.setAssocId(updatedManager.getAssocId());
		managerExists.setAssocId(updatedManager.getAssocId());
		managerExists.setEmail(updatedManager.getEmail());
		managerExists.setName(updatedManager.getName());
		managerExists.setPassword(updatedManager.getPassword());
		
		return managerRepository.save(managerExists);
		}
		
		return null;
	}
//
//	@Override
//	public List<Candidate> getCandidatesPendingForApproval(Long assocId) {
//		
//		Manager manager = managerRepository.findById(assocId).orElse(null);
//		if(manager!=null) {
//			return candidateServiceImpl.getCandidateByManagerId(assocId);
//		}
//		return Collections.EMPTY_LIST;
//	}

	@Override
	public List<Candidate> getCandidatesPendingForApproval(Long assocId) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public boolean approveCandidate(Long assocId, Long candidateId) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean rejectCandidate(Long assocId, Long candidateId) {
		// TODO Auto-generated method stub
		return false;
	}

//	@Override
//	public boolean approveCandidate(Long assocId, Long candidateId) {
//		Manager manager = managerRepository.findById(assocId).orElse(null);
//		if(manager!=null) {
//			Candidate candidate = candidateServiceImpl.getCandidateById(candidateId);
//			
//			if(candidate!=null) {
//				
//				candidate.setOfferLetterStatus(OfferLetterStatus.APPROVED);
//				return true;
//			}
//		}
//		return false;
//	}

//	@Override
//	public boolean rejectCandidate(Long assocId, Long candidateId) {
//		
//		Manager manager = managerRepository.findById(assocId).orElse(null);
//		if(manager!=null) {
//			Candidate candidate = candidateServiceImpl.getCandidateById(candidateId);
//			
//			if(candidate!=null) {
//				
//				candidate.setOfferLetterStatus(OfferLetterStatus.REJECTED);
//				return true;
//			}
//		}
//		return false;
//	
//	}

}




//

package com.adp.eletter.service;

import java.util.HashMap;
import java.util.Map;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.Resource;
import org.springframework.core.io.ResourceLoader;
import org.springframework.stereotype.Service;

import com.adp.eletter.entitiy.HR;


@Service
public class TemplateServiceImpl implements TemplateService {
	
	
	private final  ResourceLoader resourceLoader;
	
	@Value("classpath:static/")
	private Resource templateBasepath;
	
	
	private final Map<String, String> templateIdToFileNameMap = new HashMap<>();
	
	
	public TemplateServiceImpl(ResourceLoader resourceLoader) {
		this.resourceLoader = resourceLoader;
		intializeTemplateIdToFileNameMap();
	}

	private void intializeTemplateIdToFileNameMap() {
		templateIdToFileNameMap.put("offerletter","offerletter.docx");
	}

//	@Override
//	public String loadTemplate(String templateFileName) {
//		
//		return null;
//	}

	@Override
	public String getTemplateName(String templateId) {
		
		return templateId;
	}

	@Override
	public String getTemplateFileName(String templateId) {
	
		return templateIdToFileNameMap.get(templateId);
	}

}






