package com.adp.eletter.service;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.*;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.modelmapper.ModelMapper;

import com.adp.eletter.dto.CandidateDTO;
import com.adp.eletter.entitiy.Candidate;
import com.adp.eletter.entitiy.Candidate.OfferLetterStatus;
import com.adp.eletter.entitiy.User;
import com.adp.eletter.exception.CandidateException;
import com.adp.eletter.repository.CandidateRepository;
import com.adp.eletter.repository.UserRepository;

@ExtendWith(MockitoExtension.class)
public class CandidateServiceIntegrationTest {

    @Mock
    private CandidateRepository candidateRepository;

    @Mock
    private UserRepository userRepository;

    @InjectMocks
    private CandidateServiceImpl candidateServiceImpl;

    private Candidate candidate1, candidate2;
    private User user1;

    @BeforeEach
    public void setUp() {
        // ... [Your previous mock data setup]

        user1 = new User();
        user1.setId("user001");
        user1.setName("HR001");
        // ... [other user fields, adjust accordingly]

        Mockito.when(userRepository.findById(user1.getId())).thenReturn(Optional.of(user1));
        Mockito.when(userRepository.findById("invalidId")).thenReturn(Optional.empty());
    }
    
    // ... [Your previous tests]

    @Test
    public void whenUpdateRemarksByValidHR_thenRemarksShouldUpdate() throws CandidateException {
        Long candidateId = 12L;  // candidate1's ID
        String userId = "user001";  // user1's ID
        String remarks = "Some remarks by HR";

        CandidateDTO updatedDTO = candidateServiceImpl.updateRemarks(candidateId, userId, remarks);

        assertThat(updatedDTO.getRemarksByHR()).isEqualTo(remarks);
    }

    @Test
    public void whenUpdateRemarksByInvalidUser_thenThrowException() {
        Long candidateId = 12L;
        String invalidUserId = "invalidId";
        String remarks = "Some remarks";

        Exception exception = assertThrows(CandidateException.class, () -> {
            candidateServiceImpl.updateRemarks(candidateId, invalidUserId, remarks);
        });

        String expectedMessage = "User Not available";
        String actualMessage = exception.getMessage();
        assertThat(actualMessage).isEqualTo(expectedMessage);
    }

    @Test
    public void whenGetCandidateUnderValidManager_thenReturnList() throws CandidateException {
        String managerId = "user001";

        List<CandidateDTO> candidatesUnderManager = candidateServiceImpl.getCandidateUnderManager(managerId);

        // Adjust this assertion based on your expected result.
        assertThat(candidatesUnderManager).isNotEmpty();
    }

    //... Add more tests for the rest of the methods in a similar manner ...

    // Utility methods to verify interactions
    private void verifyFindByIdIsCalledOnce() {
        verify(candidateRepository, times(1)).findById(anyLong());
        reset(candidateRepository);
    }

    private void verifyFindAllCandidatesIsCalledOnce() {
        verify(candidateRepository, times(1)).findAll();
        reset(candidateRepository);
    }
}
