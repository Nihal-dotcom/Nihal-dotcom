package com.adp.eletter.api;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.server.ResponseStatusException;

import com.adp.eletter.dto.CandidateDTO;
import com.adp.eletter.entitiy.Candidate.OfferLetterStatus;
import com.adp.eletter.service.CandidateService;

@RestController
@RequestMapping("api/candidate")
@CrossOrigin
public class CandidateController {
	
	@Autowired(required=false)
	private CandidateService candidateService;
	
	@GetMapping("/all")
	public ResponseEntity<List<CandidateDTO>> getAllCandidate(){
		try {
			List<CandidateDTO> candidateDTOList = candidateService.getAllCandidates();
			return new ResponseEntity<>(candidateDTOList,HttpStatus.OK);
		} catch (Exception e) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST,e.getMessage());
		}
	}
	
	@GetMapping("/{id}")
	public ResponseEntity<CandidateDTO> getCandidateById(@PathVariable Long id){
		try {
			CandidateDTO candidateDTO = candidateService.getCandidateById(id);
			return new ResponseEntity<>(candidateDTO,HttpStatus.OK);
		} catch (Exception e) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST,e.getMessage());
		}
	}
	
	@GetMapping("/assignedHr/{id}")
	public ResponseEntity<List<CandidateDTO>> getCandidateByHRId(@PathVariable String id){
		try {
			List<CandidateDTO>  candidateDTOList = candidateService.getCandidateByHRId(id);
			return new ResponseEntity<>(candidateDTOList ,HttpStatus.OK);
		} catch (Exception e) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST,e.getMessage());
		}
	}
	
	@GetMapping("/bystatus/{status}")
	public ResponseEntity<List<CandidateDTO>> getCandidateByStatus(@PathVariable OfferLetterStatus status){
		try {
			List<CandidateDTO>  candidateDTOList = candidateService.getCandidateByStatus(status);
			return new ResponseEntity<>(candidateDTOList ,HttpStatus.OK);
		} catch (Exception e) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST,e.getMessage());
		}
	}
	
	@GetMapping("/assignedHrAndStatus/{id}/{status}")
	public ResponseEntity<List<CandidateDTO>> getCandidateByHRIdAndStatus(@PathVariable String id, @PathVariable OfferLetterStatus status){
		try {
			List<CandidateDTO>  candidateDTOList = candidateService.getCandidateByHRIdAndByStatus(id,status);
			return new ResponseEntity<>(candidateDTOList ,HttpStatus.OK);
		} catch (Exception e) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST,e.getMessage());
		}
	}
	
	@GetMapping("/under-manager/{managerId}")
	public ResponseEntity<List<CandidateDTO>> getCandidateUnderManager(@PathVariable String managerId){
		try {
			List<CandidateDTO>  candidateDTOList = candidateService.getCandidateUnderManager(managerId);
			return new ResponseEntity<>(candidateDTOList ,HttpStatus.OK);
		} catch (Exception e) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST,e.getMessage());
		}
	}
	
	@GetMapping("/under-managerAndByStatus/{id}/{status}")
	public ResponseEntity<List<CandidateDTO>> getCandidateUnderManagerIdAndStatus(@PathVariable String id, @PathVariable OfferLetterStatus status){
		try {
			List<CandidateDTO>  candidateDTOList = candidateService.getCandidateUnderManagerIdAndByStatus(id,status);
			//candidateDTOList.stream().forEach(System.out::println);
			return new ResponseEntity<>(candidateDTOList ,HttpStatus.OK);
		} catch (Exception e) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST,e.getMessage());
		}
	}
	
	
	@PutMapping("/update-status/{id}/{status}")
	public ResponseEntity<CandidateDTO> updateCandidateStatus(@PathVariable Long id, @PathVariable OfferLetterStatus status){
		try {
			CandidateDTO  candidateDTO = candidateService.updateOfferLetterStatus(id,status);
			return new ResponseEntity<>(candidateDTO ,HttpStatus.OK);
		} catch (Exception e) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST,e.getMessage());
		}
	}
	
	@PutMapping("/update-template/{id}/{template}")
	public ResponseEntity<CandidateDTO> updateCandidateTemplate(@PathVariable Long id, @PathVariable String template){
		try {
			CandidateDTO  candidateDTO = candidateService.updateTemplate(id,template);
			return new ResponseEntity<>(candidateDTO ,HttpStatus.OK);
		} catch (Exception e) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST,e.getMessage());
		}
	}
}
